import pandas as pd
from vespa.application import Vespa
from vespa.io import VespaResponse, VespaQueryResponse

# Display hits from search query results as a DataFrame
def display_hits_as_df(response: VespaQueryResponse, fields) -> pd.DataFrame:
    records = []
    for hit in response.hits:
        record = {}
        for field in fields:
            record[field] = hit["fields"][field]
        records.append(record)
    return pd.DataFrame(records)

# Function for keyword search
def keyword_search(app, search_query):
    query = {
        "yql": "select * from sources * where userQuery() limit 5",
        "query": search_query,
        "ranking": "bm25",  # bm25 ranking function for keyword search
    }
    response = app.query(query)
    return display_hits_as_df(response, ["doc_id", "title"])

# Function for semantic search (using embeddings)
def semantic_search(app, query):
    query = {
        "yql": "select * from sources * where ({targetHits:100}nearestNeighbor(embedding,e)) limit 5",
        "query": query,
        "ranking": "semantic",  # Semantic ranking for embeddings-based search
        "input.query(e)": "embed(@query)"  # Assuming the embeddings are generated by Vespa for search query
    }
    response = app.query(query)
    return display_hits_as_df(response, ["doc_id", "title"])

# Function to get embedding for a specific document by its ID
def get_embedding(doc_id, app):
    query = {
        "yql" : f"select doc_id, title, text, embedding from content.doc where doc_id contains '{doc_id}'",
        "hits": 1
    }
    result = app.query(query)
    
    if result.hits:
        return result.hits[0]
    return None

# Function to query similar documents by using an embedding vector
def query_movies_by_embedding(embedding_vector):
    query = {
        'hits': 5,
        'yql': 'select * from content.doc where ({targetHits:5}nearestNeighbor(embedding, user_embedding))',
        'ranking.features.query(user_embedding)': str(embedding_vector),
        'ranking.profile': 'recommendation'  # Example ranking profile for recommendations
    }
    return app.query(query)

# Initialize Vespa application (replace with your Vespa instance details)
app = Vespa(url="http://localhost", port=8080)


# Example query for keyword search
query = "spacious apartment"
df = keyword_search(app, query)
print(df.head())

# Example query for semantic search (embedding-based search)
query = "comfortable stay in the city"
df = semantic_search(app, query)
print(df.head())

# Get embedding of a specific document and perform semantic search using that embedding
emb = get_embedding("727926",app)
results = query_movies_by_embedding(emb["fields"]["embedding"])
df = display_hits_as_df(results, ["doc_id", "title", "text"])
print(df.head())

